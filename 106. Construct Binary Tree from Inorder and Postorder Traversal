/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* solve(vector<int>&inorder,vector<int>&postorder,unordered_map<int,int>&mp,int ins,int ine,int ps,int pe)
{
    if(ins>ine || ps>pe)
    {
        return NULL;
    }
    int val=postorder[pe];
    TreeNode *root=new TreeNode(val);
    int index=mp[val];
    int leftsize=index-ins;
    root->left=solve(inorder,postorder,mp,ins,index-1,ps,ps+leftsize-1);
    root->right=solve(inorder,postorder,mp,index+1,ine,ps+leftsize,pe-1);
    return root;
}
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int>ump;
        int n=inorder.size()-1;
        for (int i = 0; i < inorder.size(); i++) {
            ump[inorder[i]] = i;
        }
        return solve(inorder,postorder,ump,0,n,0,n);
    }
};
